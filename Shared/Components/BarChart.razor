<ul>
    @{
        int maxValue = Items.Max(x => x.Value);
    }
    @foreach (var item in Items)
    {
        <li class="@(item.IsPrimary ? "primary" : "")">
            <span class="value">
                @if (item.Value < 1000)
                {
                    @item.Value
                }
                else if (item.Value < 1000000)
                {
                    @(item.Value / 1000)
                    @("K")
                }
                else if (item.Value < 1000000000)
                {
                    @(item.Value / 1000000)
                    @("M")
                }
            </span>
            <div style="height: @(item.Value / (double)maxValue * MaxHeight)%;"></div>
            <span>@item.Label</span>
        </li>
    }
</ul>

<style>
    ul {
        display: flex;
        flex-direction: row;
        justify-content: center;
        align-items: center;
        list-style: none;
        width: 100%;
        height: 100%;
        gap: 1.4rem;
        padding: 0;
        margin: 0;
    }

    li {
        display: flex;
        flex-direction: column;
        justify-content: flex-end;
        align-items: center;
        gap: 0.5rem;
        height: 100%;
        width: 9%;
    }

    li>span {
        font-size: 1.2rem;
        font-weight: 500;
        color: #172029;
    }

    li>span.value {
        font-size: 1.5rem;
        color: #8b94a3;
    }

    li>div {
        width: 100%;
        height: 100%;
        border-radius: .5rem;
        background-color: #e4e8eb;
    }

    li.primary>div {
        background-color: #3182f7;
    }

    li.primary>span.value {
        font-size: 1.5rem;
        color: #3182f7;
    }
</style>


@code {
    public class Item
    {
        public required int Value { get; set; }
        public required string Label { get; set; }
        public bool IsPrimary { get; set; } = false;
    }

    public const int MaxHeight = 70;

    [Parameter]
    public required List<Item> Items { get; set; }

}